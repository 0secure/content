id: PCAP File Carving
version: -1
fromversion: 5.0.0
name: PCAP File Carving
description: This playbook is used to carve (extract) files from within PCAP files
  and perform enrichment and detonation of the extracted files. Supported PCAP file
  types are pcap, cap, pcapng. The playbook can handle one PCAP file per incident.
  Additional inputs allow the user to provide the WPA password for decrypting 802.11
  (wireless) traffic and adding an RSA certificate to decrypt SSL traffic. To display
  the results within the relevant incident fields, the playbook needs to run in a
  PCAP Analysis incident type. For handling of PCAP files larger than 30 MB, refer
  to the PcapMinerV2 documentation.
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: b3fa8b47-57a7-402b-80f4-4170a6a19d62
    type: start
    task:
      id: b3fa8b47-57a7-402b-80f4-4170a6a19d62
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "2"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 1320,
          "y": -300
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "2":
    id: "2"
    taskid: 46d1ff66-5bc5-49c2-8ce4-9928bee6a7c4
    type: condition
    task:
      id: 46d1ff66-5bc5-49c2-8ce4-9928bee6a7c4
      version: -1
      name: Is there a PCAP file?
      type: condition
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#default#':
      - "56"
      "yes":
      - "100"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isNotEmpty
          left:
            value:
              simple: inputs.PcapFileEntryID
            iscontext: true
    view: |-
      {
        "position": {
          "x": 1320,
          "y": -150
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "56":
    id: "56"
    taskid: 14ada8b4-7932-4210-833f-3a86c29fcc03
    type: title
    task:
      id: 14ada8b4-7932-4210-833f-3a86c29fcc03
      version: -1
      name: Done
      type: title
      iscommand: false
      brand: ""
      description: ''
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 1320,
          "y": 1130
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "99":
    id: "99"
    taskid: 3ce70e6b-5e70-4af5-8ee1-7cb14ac8b3ae
    type: regular
    task:
      id: 3ce70e6b-5e70-4af5-8ee1-7cb14ac8b3ae
      version: -1
      name: Create new PCAP file with filter
      description: |-
        PcapMIner V2 allows to parse PCAP files by displaying the all of the relevant data within including ip addresses, ports, flows, specific protocol breakdown, searching by regex, decrypting encrypted  traffic and more.
        This automation takes about a minute to process 20,000 packets (which is approximately 10MB). If you want to mine large files you can either:
        a) Use the `pcap_filter` parameter to filter your PCAP file and thus make is smaller.
        b) Copy the automation and change the `default timeout` parameter to match your needs.
      scriptName: PcapMinerV2
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "102"
    scriptarguments:
      convs_to_display: {}
      custom_regex: {}
      entry_id:
        simple: ${inputs.PcapFileEntryID}
      extract_ips:
        simple: "True"
      extract_strings: {}
      filtered_file_name:
        simple: filtered.pcap
      pcap_filter:
        simple: ${inputs.PcapFilter}
      protocol_output: {}
      rsa_decrypt_key_entry_id:
        simple: ${inputs.RsaDecryptKeyEntryID}
      wpa_password:
        simple: ${inputs.WpaPassword}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 440,
          "y": 190
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "100":
    id: "100"
    taskid: 790a8153-460a-4d11-8a80-45b88b28d873
    type: condition
    task:
      id: 790a8153-460a-4d11-8a80-45b88b28d873
      version: -1
      name: Is there a PCAP filter?
      type: condition
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#default#':
      - "101"
      "yes":
      - "99"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isNotEmpty
          left:
            value:
              simple: inputs.PcapFilter
            iscontext: true
    view: |-
      {
        "position": {
          "x": 750,
          "y": 20
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "101":
    id: "101"
    taskid: d02128af-e5ec-48cf-87af-bb8408a5fb9f
    type: regular
    task:
      id: d02128af-e5ec-48cf-87af-bb8408a5fb9f
      version: -1
      name: Carve files from unfiltered PCAP
      type: regular
      iscommand: false
      brand: ""
      description: Extract files from the original PCAP file.
    nexttasks:
      '#none#':
      - "103"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 990,
          "y": 190
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "102":
    id: "102"
    taskid: 6e5bdb2d-0146-41a4-8e9c-5b97735de4cb
    type: regular
    task:
      id: 6e5bdb2d-0146-41a4-8e9c-5b97735de4cb
      version: -1
      name: Carve files from filtered PCAP
      type: regular
      iscommand: false
      brand: ""
      description: Extract files from the filtered PCAP file.
    nexttasks:
      '#none#':
      - "103"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 440,
          "y": 390
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "103":
    id: "103"
    taskid: 2ceea607-fb04-47f6-8e8c-8559ad880d36
    type: playbook
    task:
      id: 2ceea607-fb04-47f6-8e8c-8559ad880d36
      version: -1
      name: File Enrichment - Generic v2
      playbookName: File Enrichment - Generic v2
      type: playbook
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "105"
    scriptarguments:
      MD5:
        complex:
          root: File
          accessor: MD5
          transformers:
          - operator: uniq
      SHA1:
        complex:
          root: File
          accessor: SHA1
          transformers:
          - operator: uniq
      SHA256:
        complex:
          root: File
          accessor: SHA256
          transformers:
          - operator: uniq
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 990,
          "y": 600
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "104":
    id: "104"
    taskid: e3f05672-48f4-4e77-8832-276f87cbba81
    type: playbook
    task:
      id: e3f05672-48f4-4e77-8832-276f87cbba81
      version: -1
      name: Detonate File - Generic
      playbookName: Detonate File - Generic
      type: playbook
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "56"
    scriptarguments:
      EntryID:
        complex:
          root: File
          accessor: EntryID
      File:
        complex:
          root: File
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 790,
          "y": 960
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "105":
    id: "105"
    taskid: 52e21816-4f75-4c7a-84cf-a6df0d1128dd
    type: condition
    task:
      id: 52e21816-4f75-4c7a-84cf-a6df0d1128dd
      version: -1
      name: Are there files that don't have a good DBot score?
      type: condition
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#default#':
      - "56"
      "yes":
      - "104"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isNotEqualNumber
          left:
            value:
              simple: DBotScore.Score
            iscontext: true
          right:
            value:
              simple: "1"
    view: |-
      {
        "position": {
          "x": 990,
          "y": 790
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1975,
        "width": 5390,
        "x": -3690,
        "y": -300
      }
    }
  }
inputs:
- key: WpaPassword
  value: {}
  required: false
  description: This input value is used to provide a WPA (Wi-Fi Protected Access)
    password to decrypt encrypted 802.11 Wi-FI traffic.
  playbookInputQuery:
- key: RsaDecryptKeyEntryID
  value:
    complex:
      root: File
      filters:
      - - operator: inList
          left:
            value:
              simple: File.Name
            iscontext: true
          right:
            value:
              simple: incident.pcapencryptionkey.name
            iscontext: true
        - operator: isEqualString
          left:
            value:
              simple: File.Extension
            iscontext: true
          right:
            value:
              simple: key
      accessor: EntryID
  required: false
  description: This input specifies the file entry id for the RSA decrypt key if the
    user provided the key in the incident.
  playbookInputQuery:
- key: PcapFileEntryID
  value:
    complex:
      root: File
      filters:
      - - operator: inList
          left:
            value:
              simple: File.Name
            iscontext: true
          right:
            value:
              simple: incident.pcapfile.name
            iscontext: true
        - operator: isEqualString
          left:
            value:
              simple: File.Extension
            iscontext: true
          right:
            value:
              simple: pcap
        - operator: isEqualString
          left:
            value:
              simple: File.Extension
            iscontext: true
          right:
            value:
              simple: cap
        - operator: isEqualString
          left:
            value:
              simple: File.Extension
            iscontext: true
          right:
            value:
              simple: pcapng
      accessor: EntryID
  required: false
  description: This input specifies the file entry id for the PCAP file if the user
    provided the file in the incident. One PCAP file can run per incident.
  playbookInputQuery:
- key: PcapFilter
  value: {}
  required: false
  description: |-
    This input specifies a search filter to be used on the PCAP file. Filters can be used to search only for a specific IP, protocols and other examples. The syntax is the same as in Wireshark which can be found here: https://www.wireshark.org/docs/man-pages/wireshark-filter.html
    For this playbook, using a PCAP filter will generate a new smaller PCAP file based on the provided filter therefor thus reducing the extraction of non relevant files.
  playbookInputQuery:
outputs:
- contextPath: DBotScore
  description: The DBotScore object.
  type: string
- contextPath: File
  description: The file object
  type: string
- contextPath: File.Malicious
  description: The File malicious description
  type: string
tests:
- No tests (auto formatted)
